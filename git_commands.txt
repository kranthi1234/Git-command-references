git init -> to initialized empty git repo.
git status -> to check status of the directory.
git add . | git add "file_name"-> to add files to staging area.
git commit -m "message" -> to save file from staging area.
git remote add origin "url to repo" -> adding remote repo for pushing code. insted of orgin you can have some other name also like mycentral. when you push/pull code you have to use mycentral word insted of origin word. we can have multiple remote repo added.
git remote -v -> to check existing central repo.
git push origin master -> to push your code from local to remote server.
git clone "url" -> to clone existing repo.
git pull origin master -> to pull the changes from the remote repo.
git branch "name-of-new-branch" -> to create new branch from existing branch.
git branch -D "branch-name" -> to delete branch
git checkout "branch-name" -> to switch branch
git log -> to see the logs of commit in current branch
git log -n "Integer_number" -> to print first n commit.
git log --stat -> to see which files are changed, how many lines are added and deleted.
git log --oneline ->  to see only commit message.
git log --author="author_name" -> to see commit of specific author.
git stash -> used when you want to save your work without commiting the code. this is helpful when you want to switch to branches but do not want to save your work to your git repo. if you want to stash your untracked files use git stash -u
git stash pop -> used when you are back and want to retrieve working.
git revert "commit-id" -> to revert the commit to a previous version.
git revert --abort -> if you have some issue you can abort revert.
git restore --staged "filename" -> to take it out from staging area.
git checkout "commit-id" -> to go back to commit and see what changes have actually been done.
git checkout "commit-id" "file_name" -> to go back to commit and see what changes have actually been done in specific file.
git switch -c "branch_name" -> when you go to specific commit and want to save that commit changes you have to use this command.
git diff "commit-id of version x" "commit-id of version y" -> to check diff between to file (x should be older and y should be newer commit)
git diff "commit-id of version x" "commit-id of version y" "file_name" -> to check diff of specific filename between 2 commit-id.
git diff "file-name" -> to see changes in file.
git diff HEAD . -> HEAD points to commited version of branch and '.' is current directory
git diff --staged -> to check diff of while which are there in staging area.
git diff HEAD~n -> to see latest - n commit.
git diff HEAD~n "file_name"-> to see only specific file changes in latest - n commit.
git reset HEAD "File_name" -> to unstage file from staging area.
git pull origin master --allow-unrelated-histories -> when you get this error message "fatal: refusing to merge unrelated histories"
